@page "/game-placements"
@inject HttpClient Http

<PageTitle>Game Placements</PageTitle>

<h1 style="text-align: center;">Game Placements for:</h1>
<h1 style="text-align: center;">Minnesota vs. Nebraska</h1>
<div style="width: 100%; display: flex; justify-content: center;">
    <img class="game-banner" src="img/GameBanners/pregame.jpg" alt="Pregame M" />
</div>

<div style="width: 100%; display: flex; flex-direction: column; align-items: center; gap: 10px;">
    <div class="menu">
        @if (bandMembers == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <!-- Search Bar -->
            <div style="margin: 20px 0; width: 100%;">
                <input type="text" 
                    @bind="searchTerm" 
                    @oninput="OnSearchInput"
                    placeholder="Search by name or placement..." 
                    class="search-bar" />
            </div>

            <div class="member-list">
                @foreach (var bandMember in filteredBandMembers)
                {
                    <div class="member-pill-row">
                        <div class="member-name">@bandMember.FirstName @bandMember.LastName</div>
                        <div class="pill-container">
                            <span class="pill-label">Placement:</span>
                            <span class="pill" style="background-color: #F5D3E8;">@bandMember.Placement</span>

                            <span class="pill-label">Pride/Sky:</span>
                            <span class="pill" style="background-color: #E8F5D3;">@bandMember.PrideSky</span>

                            <span class="pill-label">Leader:</span>
                            <span class="pill" style="background-color: #D3F5E0;">@bandMember.Leader</span>
                        </div>
                    </div>

                }
            </div>

            @if (filteredBandMembers.Length == 0 && !string.IsNullOrEmpty(searchTerm))
            {
                <p style="text-align: center; color: #666; margin-top: 20px;">
                    No members found matching "@searchTerm"
                </p>
            }
        }

    </div>
</div>

@code {
    private BandMember[]? bandMembers;
    private string searchTerm = string.Empty;
    
    private BandMember[] filteredBandMembers => 
        bandMembers?.Where(member => 
            string.IsNullOrEmpty(searchTerm) || 
            member.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            member.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            $"{member.FirstName} {member.LastName}".Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            member.Placement.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            member.PrideSky.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        ).ToArray() ?? Array.Empty<BandMember>();

    protected override async Task OnInitializedAsync()
    {
        bandMembers = await Http.GetFromJsonAsync<BandMember[]>("data/pg.json");
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
    }

    public class BandMember
    {
        public required string FirstName { get; set; }

        public required string LastName { get; set; }

        public required string Placement { get; set; }

        public required string PrideSky { get; set; }

        public required string Leader { get; set; }
    }
}